#!/usr/bin/env bash
# 97-thinkpad-support — Omarchy ThinkPad setup (sudo-safe, idempotent, non-fatal)
set -euo pipefail

# ---------------------------------------------------------------------------
# Debug capture
# ---------------------------------------------------------------------------
DEBUG_LOG="thinkpad-debug.log"
debug_dump() {
  log_info "Writing debug log → ${DEBUG_LOG}"
  {
    echo "===== KERNEL & DKMS INFO ====="
    echo "Kernel: $(uname -r)"
    pacman -Q | grep -E '^(linux|linux-headers|dkms|bolt|tlp|usbutils|lm_sensors)\b' || true
    echo
    echo "===== DisplayLink Service ====="
    systemctl status displaylink.service -n 30 || true
    echo
    echo "===== dmesg (evdi) ====="
    dmesg | grep -i evdi | tail -40 || true
  } > "${DEBUG_LOG}"
}

# ---------------------------------------------------------------------------
# Flag check
# ---------------------------------------------------------------------------
if [[ ${thinkpadFlag:-false} != true ]]; then
  log_warn "ThinkPad support skipped."
  return
else
  log_warn "Installing ThinkPad support."
fi

# ---------------------------------------------------------------------------
# Detect ThinkPad
# ---------------------------------------------------------------------------
vendor=$(tr -d '\0' < /sys/class/dmi/id/sys_vendor 2>/dev/null || true)
product=$(tr -d '\0' < /sys/class/dmi/id/product_name 2>/dev/null || true)
version=$(tr -d '\0' < /sys/class/dmi/id/product_version 2>/dev/null || true)

vendor_lc=$(echo "$vendor" | tr '[:upper:]' '[:lower:]')
product_lc=$(echo "$product" | tr '[:upper:]' '[:lower:]')
version_lc=$(echo "$version" | tr '[:upper:]' '[:lower:]')

if [[ "$vendor_lc" =~ lenovo ]]; then
  if [[ "$product_lc" =~ thinkpad || "$version_lc" =~ thinkpad || "$product_lc" =~ ^(p1|t14|t15|x1|x13|l14|l15) ]]; then
    log_info "Detected Lenovo ThinkPad (${vendor} ${product})."
  else
    log_warn "Lenovo system (${product}) not explicitly labeled ThinkPad — treating as ThinkPad-compatible."
  fi
else
  log_warn "Not a Lenovo/ThinkPad (vendor=${vendor}, product=${product}). Skipping ThinkPad setup."
  return
fi

log_bar
say "Installing ThinkPad drivers and utilities..."

# ---------------------------------------------------------------------------
# Remove conflicts
# ---------------------------------------------------------------------------
if systemctl is-enabled power-profiles-daemon.service &>/dev/null; then
  log_info "Removing power-profiles-daemon (conflicts with TLP)..."
  sudo systemctl disable --now power-profiles-daemon.service || true
  sudo pacman -Rns --noconfirm power-profiles-daemon || true
fi

# ---------------------------------------------------------------------------
# Core ThinkPad packages
# ---------------------------------------------------------------------------
log_info "Installing core ThinkPad packages..."

required_pkgs=(i2c-tools lm_sensors tlp tlp-rdw bolt usbutils)
optional_pkgs=(acpi_call tp_smapi hdapsd)

for pkg in "${required_pkgs[@]}"; do
  sudo pacman -Si "$pkg" &>/dev/null && sudo pacman -S --noconfirm --needed "$pkg" || log_warn "Failed to install ${pkg}"
done

for pkg in "${optional_pkgs[@]}"; do
  sudo pacman -Si "$pkg" &>/dev/null && sudo pacman -S --noconfirm --needed "$pkg" || true
done

sudo systemctl enable --now tlp.service || true
sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket || true
sudo systemctl enable --now bolt.service || true
have_cmd boltctl && boltctl list || true

log_info "Installing thinkfan (AUR)..."
yay -S --noconfirm --needed thinkfan || log_warn "thinkfan install failed."

log_info "Detecting sensors..."
have_cmd sensors-detect && yes '' | sudo sensors-detect --auto || log_warn "sensors-detect failed."

# ---------------------------------------------------------------------------
# DisplayLink / EVDI
# ---------------------------------------------------------------------------
if have_cmd lsusb && lsusb | grep -qi 'DisplayLink'; then
  log_info "DisplayLink dock detected — preparing EVDI and DisplayLink."
  sudo pacman -S --noconfirm --needed linux-headers dkms || log_warn "headers/dkms install failed."

  kernel_ver="$(uname -r)"
  if [[ ! -e "/lib/modules/${kernel_ver}/build" && -d "/usr/lib/modules/${kernel_ver}/build" ]]; then
    log_warn "Creating missing /lib/modules/${kernel_ver}/build symlink..."
    sudo ln -sf "/usr/lib/modules/${kernel_ver}/build" "/lib/modules/${kernel_ver}/build"
  fi

  hdr_pkg_ver="$(pacman -Q linux-headers 2>/dev/null | awk '{print $2}' || true)"
  if [[ -n "$hdr_pkg_ver" && "$kernel_ver" != "${hdr_pkg_ver%-*}"* ]]; then
    log_warn "Kernel (${kernel_ver}) and headers (${hdr_pkg_ver}) may mismatch. Recommend: pacman -Syu && reboot."
  fi

  # Fix evdi conflict automatically if detected
  if pacman -Q evdi-amd-vmap-texture &>/dev/null; then
    log_warn "Removing conflicting evdi-amd-vmap-texture..."
    sudo pacman -Rns --noconfirm evdi-amd-vmap-texture || true
  fi

  if have_cmd yay; then
    yay -S --noconfirm --needed evdi-dkms displaylink || log_warn "displaylink/evdi AUR install failed."
  else
    log_warn "AUR unavailable — attempting manual EVDI build."
    build_dir="/tmp/evdi"
    sudo rm -rf "$build_dir" || true
    sudo mkdir -p "$build_dir"
    EVDI_REPO="https://github.com/DisplayLink/evdi.git"

    if timeout 60s git ls-remote --tags "$EVDI_REPO" | grep -q "refs/tags/1.13.1"; then
      log_info "Cloning EVDI tag 1.13.1..."
      timeout 120s sudo git clone --depth=1 --branch 1.13.1 "$EVDI_REPO" "$build_dir" || log_warn "EVDI clone failed."
    else
      log_warn "Tag 1.13.1 not found — using master branch."
      timeout 120s sudo git clone --depth=1 "$EVDI_REPO" "$build_dir" || log_warn "EVDI clone failed."
    fi

    if [[ -d "$build_dir/module" ]]; then
      pushd "$build_dir/module" >/dev/null
      sudo make CFLAGS=-Wno-error || log_warn "EVDI build failed."
      sudo make INSTALL_MOD_DIR="/lib/modules/$(uname -r)/kernel/drivers/gpu/drm/evdi" modules_install || log_warn "EVDI install failed."
      sudo depmod -a || true
      popd >/dev/null
    fi
  fi

  # Always retry modprobe after rebuild
  sudo modprobe -r evdi 2>/dev/null || true
  sleep 1
  sudo modprobe evdi || log_warn "modprobe evdi failed."
  sleep 1

  if lsmod | grep -q '^evdi'; then
    log_pass "EVDI module loaded."
  else
    log_warn "EVDI module still not visible."
  fi

  sudo systemctl enable --now displaylink.service || true
  sudo systemctl restart displaylink.service || true
  if systemctl is-active --quiet displaylink.service; then
    log_pass "displaylink.service active."
  else
    log_fail "displaylink.service failed."
    debug_dump
  fi
else
  log_info "No DisplayLink dock detected — skipping EVDI setup."
fi

# ---------------------------------------------------------------------------
# Dock NIC drivers
# ---------------------------------------------------------------------------
log_info "Ensuring dock NIC drivers are available."
sudo modprobe ax88179_178a || true
sudo modprobe cdc_ncm || true
sudo modprobe r8152 || true

# ---------------------------------------------------------------------------
# Summary
# ---------------------------------------------------------------------------
log_bar
say "ThinkPad Setup Summary"
log_info "Kernel: $(uname -r)"
lsmod | grep -q '^evdi' && log_pass "EVDI module loaded." || log_warn "EVDI not loaded."
systemctl is-active --quiet displaylink.service && log_pass "DisplayLink active." || log_warn "DisplayLink inactive."
have_cmd tlp-stat && sudo tlp-stat -b | grep -E 'Mode|Charge' || true
log_pass "ThinkPad driver step completed (non-fatal)."
log_bar

