#!/bin/bash
# I enable warning when I am debugging .bashrc
echoWarning=0

# {{{ Default BROWSER

if [[ -z $WSL_DISTRO_NAME ]]; then
  if programExists brave-browser; then
    BROWSER=$(which brave-browser)
  elif programExists brave; then
    BROWSER=$(which brave)
  elif programExists chrome; then
    BROWSER=$(which chrome)
  elif programExists firefox; then
    BROWSER=$(which firefox)
  else
    BROWSER=""
  fi
else
  BROWSER=brave.exe
  export TEXMFDIST=/usr/share/texlive/texmf-dist
  export TEXMFHOME=/usr/share/texlive/texmf-dist
fi
export BROWSER

# -------------------------------------------------------------------------- }}}
# {{{ TUI file manager

if programExists yazi; then
  FILE=$(which yazi)
fi
  if ! osType "msys"; then
    TERMINAL=""
    [[ $echoWarning == 1 ]] && echo "WARNING: yazi"
  fi
export FILE

# -------------------------------------------------------------------------- }}}
# {{{ TERMINAL

if programExists ghostty; then
  TERMINAL=$(which ghostty)
elif programExists alacritty; then
  TERMINAL=$(which alacritty)
elif programExists kitty; then
  TERMINAL=$(which kitty)
else
  if ! osType "msys"; then
    TERMINAL=""
    [[ $echoWarning == 1 ]] && echo "WARNING: alacritty, ghostty or kitty are not installed."
  fi
fi
export TERMINAL

# -------------------------------------------------------------------------- }}}
# {{{ Darwin CLI and LS colors.

if osType "darwin"; then
  export CLICOLOR=1
  export LSCOLORS=GxFxBxDxCxegedabagacad
fi

# -------------------------------------------------------------------------- }}}
# {{{ amber location.

if dirExists ${SOUPHOME}/amber; then
   AMBERPATH=${SOUPHOME}/amber
else
  AMBERPATH=""
  [[ $echoWarning == 1 ]] && echo "WARNING: amber is not installed."
fi
export AMBERPATH

if [[ -d ${AMBERPATH} ]]; then
  newfactoryitem() {
    ${AMBERPATH}/bin/newfactoryitem "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ autodoc location.

if  dirExists ${SOUPHOME}/autodoc; then
  AUTODOCPATH=${SOUPHOME}/autodoc
else
  [[ $echoWarning == 1 ]] && echo "WARNING: autodoc is not installed."
  AUTODOCPATH=""
fi
export AUTODOCPATH

# -------------------------------------------------------------------------- }}}
# {{{ docbld location and function.  These must go together.

if dirExists ${SOUPHOME}/docbld; then
  DOCBLDPATH=${SOUPHOME}/docbld
else
  [[ $echoWarning == 1 ]] && echo "WARNING: docbld is not installed."
  DOCBLDPATH=""
fi
export DOCBLDPATH

# -------------------------------------------------------------------------- }}}
# {{{ dotnet

if dirExists ${HOME}/.dotnet; then
  DOTNET_ROOT=${HOME}/.dotnet
  export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
else
  DOTNET_ROOT=""
fi
export DOTNET_ROOT

# -------------------------------------------------------------------------- }}}
# {{{ emend location.

if dirExists ${SOUPHOME}/emend; then
   EMENDPATH=${SOUPHOME}/emend
else
  EMENDPATH=""
  [[ $echoWarning == 1 ]] && echo "WARNING: emend is not installed."
fi
export EMENDPATH

if [[ -d ${EMENDPATH} ]]; then
  newcomponent() {
    ${EMENDPATH}/bin/newcomponent "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ Editor.

export MANWIDTH=76
if programExists nvim; then
  EDITOR=$(which nvim)
elif programExists vim; then
  EDITOR=$(which nvim)
else
  EDITOR=""
  [[ $echoWarning == 1 ]] && echo "WARNING: vim or nvim are not installed."
fi
export EDITOR

# -------------------------------------------------------------------------- }}}
# {{ File manager

if programExists nautilus; then
  FILEMANAGER=$(which nautilus)
elif programExists thunar; then
  FILEMANAGER=$(which thunar)
else
  FILEMANAGER=""
  [[ $echoWarning == 1 ]] && echo "WARNING: Nautlis or Thunar are not installed."
fi
export FILEMANAGER

# -------------------------------------------------------------------------- }}}
# {{{ FZF customizations

export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'

# -------------------------------------------------------------------------- }}}
# {{{ HISTCONTROL

export HISTCONTROL=ignoreboth:erasedups

# -------------------------------------------------------------------------- }}}
# {{{ Ibus settings

#type ibus-setup in terminal to change settings and start the daemon
#delete the hashtags of the next lines and restart
#export GTK_IM_MODULE=ibus
#export XMODIFIERS=@im=dbus
#export QT_IM_MODULE=ibus

# -------------------------------------------------------------------------- }}}
# {{{ JAVA locations.

if dirExists ${HOME}/build/lclasses/main; then
  CLASSPATH=build/classes/main:build/classes/test
  export CLASSPATH
fi

# -------------------------------------------------------------------------- }}}
# {{{ newdoc location and functions.  These must go together.

if dirExists ${SOUPHOME}/newdoc; then
   NEWDOCPATH=${SOUPHOME}/newdoc
else
   [[ $echoWarning == 1 ]] && echo "WARNING: newdoc is not installed."
  NEWDOCPATH=""
fi
export NEWDOCPATH

if [[ -d ${NEWDOCPATH} ]]; then
  newdoc() {
    ${NEWDOCPATH}/newdoc "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
