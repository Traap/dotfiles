#!/bin/bash
# {{{ list directory names in current folder

lsd() { ls -d */ | tr -d '/'; }

# -------------------------------------------------------------------------- }}}
# {{{ Get repo provider folder
#     $1 => repoLocation [bb | git | vim | soup]

repo() {
  local repoLocation="$1"

  case "$repoLocation" in
    bb)
      repoRoot=bb
      ;;
    git)
      repoRoot=git
      ;;
    vim)
      repoRoot=git/vim/bundle
      ;;
    soup)
      repoRoot=soup
      ;;
    work)
      repoRoot=gitea
      ;;
    *)
      repoRoot=git
      ;;
    esac
  echo "$repoRoot"
}

# -------------------------------------------------------------------------- }}}
# {{{ Pull latest changes
# Args:
# $1 => repoLocation
# $2 => pull
#
# Steps:
#   1. Local tracked files must be clean.
#   2. Remote must have changes.
#   3. Duh! set user name and email.
#   4. Tank .. PULL
#
# Note:
# https://stackoverflow.com/questions/3258243/check-if-pull-needed-in-git

gitPull() {
  local repoLocation="$1"
  local action="$2"

  case "$action" in
    pull)
      upstream='@{u}'
      git fetch
      local=$(git rev-parse @)
      remote=$(git rev-parse "$upstream")
      base=$(git merge-base @ "$upstream")

      if [[ "$local" != "$remote" && "$local" == "$base" ]]; then
        echo "*** $(pwd) ***"
        echo "$base"
        gitSetUserAndEmail "$repoLocation" "$action"
        git pull
        echo
      fi
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Set git user and email using gce (Git Config Email).
#
# $1 => repoLocation
# $2 => action

gitSetUserAndEmail() {
  local repoLocation="$1"
  local action="$2"

  case "$action" in
    pull)
      case "$repoLocation" in
          bb) gce work ;;
        soup) gce work ;;
           *) gce traap ;;
      esac
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Scan git repositories.
#
# $1 => repoLocation
# $2 => action

gits() {
  local repoLocation="$1"
  local action="$2"

  # Save current directory.
  dir=$(pwd)

  # Move to repoLocation root.
  repoRoot=$(repo "$1")
  cd "${HOME}"/"${repoRoot}" || exit

  for i in $(lsd); do
    # move to subdirectory
    d=${HOME}/${repoRoot}/${i%%}
    cd "$d" || exit

    # Do work if were are inside a git repository.
    if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) ]]; then
      if [[ -z $(git status --porcelain 2>/dev/null && git stash list 2>/dev/null) ]]; then
        gitPull "$1" "$2"
      else
        echo "*** $d ***"
        gdr
        echo ""
      fi
    fi

    # move up a directory
    cd - > /dev/null || exit
  done

  # Restore current director.
  cd "$dir" || exit
}

# -------------------------------------------------------------------------- }}}
# {{{ Kick start the show.
#
#     Use: gits git pull
#     $1 => repoLocation
#     $2 => action

gits "$@"

# -------------------------------------------------------------------------- }}}
