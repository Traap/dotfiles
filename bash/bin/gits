#!/bin/bash

# {{{ Colors and Icons
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

ICON_UPTODATE="✅"
ICON_PULLING="🔄"
ICON_STASH="💾"
ICON_ERROR="❌"
ICON_FOLDER="📁"
ICON_TOTAL="📦"
ICON_TIME="⏱️"

# Compact mode toggle
COMPACT=true

# Flags
FLAG_CLEAN=false
FLAG_UTF16=false
FLAG_LIST_STASH=false
FLAG_PULL=false
FLAG_HELP=false
FLAG_LIST_REPOS=false
FLAG_VERBOSE=false

REPO_LOCATION="git"

# Summary counters
count_total=0
count_uptodate=0
count_pull=0
count_diverged=0
count_nogit=0
count_stash=0

# Timer start
start_time=$(date +%s.%N)

# -------------------------------------------------------------------------- }}}
# {{{ List directory names in current folder

lsd() { ls -d */ 2>/dev/null | tr -d '/'; }

# -------------------------------------------------------------------------- }}}
# {{{ Get repo provider folder
repo() {
  local repoLocation="$1"

  case "$repoLocation" in
    bb)    echo "bb" ;;
    git)   echo "git" ;;
    vim)   echo "git/vim/bundle" ;;
    soup)  echo "soup" ;;
    work)  echo "gitea" ;;
    *)     echo "" ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Remove untracked files

removeUntracked() {
  git clean -fd
}

# -------------------------------------------------------------------------- }}}
# {{{ Convert UTF16 FE files to UTF8

convertUtf16ToUtf8() {
  local files
  files=$(find . -type f -exec file {} \; | grep "UTF-16" | cut -d: -f1)
  for f in $files; do
    iconv -f UTF-16 -t UTF-8 "$f" -o "$f.converted" && mv "$f.converted" "$f"
    echo -e "${YELLOW}Converted $f to UTF-8${RESET}"
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ List repositories with stashes

listStashedRepos() {
  if [[ -n $(git stash list) ]]; then
    local repoName
    repoName=$(basename "$(pwd)")
    echo -e "${YELLOW}${ICON_STASH} ${repoName} has stashed items${RESET}"
    ((count_stash++))
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Pull latest changes

refreshRepo() {
  local dir="$1"
  pushd "$dir" >/dev/null || return

  ((count_total++))

  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    local repoName
    repoName=$(basename "$(pwd)")
    echo -e "${RED}${ICON_FOLDER} Directory ${repoName} is not a git repository${RESET}"
    ((count_nogit++))
    popd >/dev/null || return
    return
  fi

  local repoName
  repoName=$(basename "$(pwd)")

  if $FLAG_CLEAN; then
    removeUntracked
    echo -e "${BLUE}Cleaned untracked files in ${repoName}${RESET}"
    popd >/dev/null || return
    return
  fi

  if $FLAG_UTF16; then
    convertUtf16ToUtf8
    popd >/dev/null || return
    return
  fi

  if $FLAG_LIST_STASH; then
    listStashedRepos
    popd >/dev/null || return
    return
  fi

  if $FLAG_PULL; then
    if [[ -n $(git status --porcelain) ]]; then
      git stash push -u -m "Auto-stash before pull" &>/dev/null
      if ! $COMPACT; then
        echo -e "${YELLOW}${ICON_STASH} Stashed changes in ${repoName}${RESET}"
      fi
    fi

    git fetch &>/dev/null

    local localHash remoteHash baseHash
    localHash=$(git rev-parse @)
    remoteHash=$(git rev-parse @{u} 2>/dev/null || true)
    baseHash=$(git merge-base @ @{u} 2>/dev/null || true)

    if [[ -z "$remoteHash" ]]; then
      echo -e "${RED}${ICON_ERROR} ${repoName} has no upstream${RESET}"
      ((count_nogit++))
      popd >/dev/null || return
      return
    fi

    if [[ "$localHash" == "$remoteHash" ]]; then
      echo -e "${GREEN}${ICON_UPTODATE} ${repoName}${RESET}"
      ((count_uptodate++))
    elif [[ "$localHash" == "$baseHash" ]]; then
      echo -e "${BLUE}${ICON_PULLING} ${repoName}${RESET}"
      git pull --ff-only
      ((count_pull++))
    else
      echo -e "${RED}${ICON_ERROR} ${repoName} diverged: manual merge needed${RESET}"
      ((count_diverged++))
    fi
  fi

  popd >/dev/null || return
}

# -------------------------------------------------------------------------- }}}
# {{{ Show Help

showHelp() {
  echo "Usage: gits [options]"
  echo "Options:"
  echo "  -r <repo>   Specify repo location (default: git)"
  echo "  -p          Pull latest changes"
  echo "  -x          Remove untracked files"
  echo "  -U          Convert UTF-16 files to UTF-8"
  echo "  -s          List repositories with stash entries"
  echo "  -v          Verbose output"
  echo "  -l          List available repo locations"
  echo "  -h          Show this help message"
}

# -------------------------------------------------------------------------- }}}
# {{{ List Repo Locations

listRepos() {
  echo "Available repo locations:"
  echo "  git"
  echo "  bb"
  echo "  vim"
  echo "  soup"
  echo "  work"
}

# -------------------------------------------------------------------------- }}}
# {{{ Scan git repositories in parallel

gits() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -r) REPO_LOCATION="$2"; shift ;;
      -p) FLAG_PULL=true ;;
      -x) FLAG_CLEAN=true ;;
      -U) FLAG_UTF16=true ;;
      -s) FLAG_LIST_STASH=true ;;
      -v) FLAG_VERBOSE=true COMPACT=false ;;
      -l) FLAG_LIST_REPOS=true ;;
      -h) FLAG_HELP=true ;;
    esac
    shift
  done

  if $FLAG_HELP; then
    showHelp
    exit 0
  fi

  if $FLAG_LIST_REPOS; then
    listRepos
    exit 0
  fi

  # If no action flags are set, default to -p
  if ! $FLAG_PULL && ! $FLAG_CLEAN && ! $FLAG_UTF16 && ! $FLAG_LIST_STASH; then
    FLAG_PULL=true
  fi

  local dir=$(pwd)

  local repoRoot
  repoRoot=$(repo "$REPO_LOCATION")

  if [[ -z "$repoRoot" || ! -d "$HOME/$repoRoot" ]]; then
    echo -e "${RED}${ICON_ERROR} Directory $HOME/$repoRoot does not exist.${RESET}"
    exit 1
  fi

  cd "$HOME/$repoRoot" || exit

  for i in $(lsd); do
    refreshRepo "$HOME/$repoRoot/$i" &
  done

  wait

  cd "$dir" || exit
}

# -------------------------------------------------------------------------- }}}
# {{{ Show Summary

showSummary() {
  end_time=$(date +%s.%N)

  elapsed=$(echo "$end_time - $start_time" | bc)

  if (( $(echo "$elapsed >= 60" | bc -l) )); then
    minutes=$(echo "$elapsed/60" | bc)
    seconds=$(echo "$elapsed-($minutes*60)" | bc)
    elapsed_fmt="${minutes}m ${seconds}s"
  else
    elapsed_fmt="${elapsed}s"
  fi

  echo -e "\n----- Summary -----"
  echo -e "${ICON_TOTAL} Total checked : $count_total"
  if $FLAG_PULL; then
    echo -e "${ICON_UPTODATE} Up-to-date    : $count_uptodate"
    echo -e "${ICON_PULLING} Pulled        : $count_pull"
    echo -e "${ICON_ERROR} Diverged      : $count_diverged"
  fi
  echo -e "${ICON_FOLDER} Not a repo    : $count_nogit"
  if $FLAG_LIST_STASH; then
    echo -e "${ICON_STASH} Repos with stash : $count_stash"
  fi
  echo -e "${ICON_TIME} Elapsed time  : $elapsed_fmt"
  echo -e "-------------------"
}

# -------------------------------------------------------------------------- }}}
# {{{ Kick start

if [[ "$*" == *"-h"* ]]; then
  showHelp
  exit 0
fi

if [[ "$*" == *"-l"* ]]; then
  listRepos
  exit 0
fi

gits "$@"
showSummary

# -------------------------------------------------------------------------- }}}
