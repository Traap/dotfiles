#!/usr/bin/env bash
# {{{ Create and toggle a winclass.
#
# Shout out:
#   Jake@Linux
#   https://www.youtube.com/watch?v=Zmx9fia1PTA&t=443s
#
# -------------------------------------------------------------------------- }}}
# {{{ Global variables are prefaced with an underscore as follows:
#     $1 -> _tmuxSession is the name of the tmux sesion created.
#     $2 -> _dir is the directory the TMUX session is started from.
#     _displayTime -> time in milliseconds notify-send messages are displayed.
#     _verbose -> manually toggled true or false.
#     _tmuxSession -> TMUX session name being created, hidded or unhidden.
#     _dir -> directory TMUX session operates from.
#     _winclass -> a readonly array with X11 window class names.
#     _workspace_id -> Hyperland workspace id.  All others -1.
#

# Devine global variables.

_verbose=true
_displayTime=2500
_tmuxSession=""
_dir=""
DESKTOP=""
_winclass=()
_workspace_id=-1

set_global_variables() {
  _tmuxSession="$1"
  _dir="${2:-$HOME}"
  DESKTOP=$(detect_window_manager)

  case "$DESKTOP" in
    bspwm)
      check_bspwm_requirements
      find_bspwm_winclass
      ;;
    hyprland)
      check_hyperland_requirements
      find_hyperland_winclass
      get_hyperland_active_workspace
      ;;
    *)
      echo "ERROR: Destop is not supported.  Exiting."
      exit 0
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Search Bspwm for winclass name using _tmuxSession

find_bspwm_winclass(){
  readarray -t _winclass < <(xdotool search --classname "$_tmuxSession")
}

# -------------------------------------------------------------------------- }}}
# {{{ Check Bspwm for Required Programs

check_bspwm_requirements(){
  local error=0
  if ! command -v xdo >/dev/null; then
    error=1
    echo "xdo required."
  fi

  if ! command -v xdotool >/dev/null; then
    error=1
    echo "xdotool required."
  fi

  if [[ $error == 1 ]]; then
    echo "Missing required BSPWM programs.  Exiting."
    exit 1
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Search Hyprland for winclass name using _tmuxSession.

find_hyperland_winclass(){
  readarray -t _winclass < <(
    hyprctl clients -j | jq -r --arg name "$_tmuxSession" '
    .[] | select(.title | contains($name)) | .address
    '
  )
}

# -------------------------------------------------------------------------- }}}
# {{{ Check Hyprland for Required Programs

check_hyperland_requirements(){
  local error=0
  if ! command -v hyprctl >/dev/null; then
    error=1
    echo "hyprctl required."
  fi

  if ! command -v jq >/dev/null; then
    error=1
    echo "jq  required."
  fi

  if [[ $error == 1 ]]; then
    echo "Missing required Hyprland programs.  Exiting."
    exit 1
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Get active workspace from Hyprland.

get_hyperland_active_workspace(){
  _workspace_id=$(hyprctl activeworkspace -j | jq -r '.id');
}

# -------------------------------------------------------------------------- }}}
# {{{ Detect window manager
#
# This function check the running window manager.  Right now only bspwm and
# Hyprland are supported

detect_window_manager() {
  if pgrep -x bspwm >/dev/null; then
    echo "bspwm"
  elif pgrep -x Hyprland >/dev/null; then
    echo "hyprland"
  else
    echo "Unsupported"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Start a terminal using $_tmuxSession as the X11 instance name.

start_terminal() {
  notify "Create $_tmuxSession"

  cd "$_dir" || exit
  touch /tmp/"$_tmuxSession"
  case "$DESKTOP" in
    bspwm)
      ghostty --x11-instance-name="$_tmuxSession" --command="ao $_tmuxSession"
      ;;
    hyprland)
      ghostty --title="$_tmuxSession" --command="ao $_tmuxSession"
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Hide $_tmuxSession

hide_terminal(){
  notify "Hide $_tmuxSession"

  rm /tmp/"$_tmuxSession"
  case "$DESKTOP" in
    bspwm)
      for id in "${_winclass[@]}"; do
        xdo hide "$id";
      done
      ;;
    hyprland)
      for id in "${_winclass[@]}"; do
        hyprctl dispatch movetoworkspacesilent special:"$_tmuxSession",address:"$id"
      done
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ Show $_tmuxSession

show_terminal(){
  notify "Show $_tmuxSession"

  touch /tmp/"$_tmuxSession"
  case "$DESKTOP" in
    bspwm)
      for id in "${_winclass[@]}"; do
        xdo show "$id";
        # wmctrl -i -a "$id"
      done
      ;;
    hyprland)
      for id in "${_winclass[@]}"; do
        hyprctl dispatch movetoworkspace "$_workspace_id",address:"$id"
        hyprctl dispatch focuswindow address:"$id"
      done
      ;;
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ toggle winclass function.
#
# This function gets winclass and uses it when ghostty is started to run the
# ao (alpha omega) script with a parameter. ao is manages creating named TMUX
# sessions.  Toggler's first innovation runs ghostty. Thereafter the winclass
# is toggled: hidden or showed.
#
# Parameters:
# 1 - winclass to toggle.  Also passed to ao to setup a named TMUX session.
# 2 - working directory

toggle_winclass() {
  set_global_variables "$1" "$2"

  # NOTE: Uncomment when are debugging.
  # notify "Search $_tmuxSession"

  if [[ -z "$_winclass" ]]; then
    start_terminal
  else
    if [[ -f /tmp/"$_tmuxSession" ]]; then
      hide_terminal
    elif [[ ! -f /tmp/"$_tmuxSession" ]]; then
      show_terminal
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ notify
#
# Display a notificaiton message when verbose is true.

notify() {
  [[ $_verbose == true ]] && notify-send -t "$_displayTime" "Toggler" "$1"
}

# -------------------------------------------------------------------------- }}}
# {{{ Use valid input to toggle a winclass.

if [[ $# -eq 1 ]]; then
  case "$1" in
        "Bracco")   toggle_winclass "$1" "$HOME/bracco" ;;
        "Hyprland") toggle_winclass "$1" "$DOTHOME/hypr" ;;
        "Neovim")   toggle_winclass "$1" "$GITHOME/nvim.traap" ;;
    "Scratchpad")   toggle_winclass "$1" "$WIKIHOME" ;;
       "Upgrade")   toggle_winclass "$1" "$HOME" ;;
          "Wiki")   toggle_winclass "$1" "$WIKIHOME" ;;
       "YouTube")   toggle_winclass "$1" "$GITHOME/youtube" ;;
          "Zero")   toggle_winclass "$1" "$GITHOME" ;;
    *)
      echo "Toggling option not supported"
      exit
      ;;
  esac
else
  echo "toggler [Hyprland|Neovim|Scratchpad|Upgrade|Wiki|YouTube|Zero]"
fi

# -------------------------------------------------------------------------- }}}
