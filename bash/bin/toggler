#!/usr/bin/env bash
# {{{ Create and toggle a winclass .
#
# Shout out:
#   Jake@Linux
#   https://www.youtube.com/watch?v=Zmx9fia1PTA&t=443s
#
# -------------------------------------------------------------------------- }}}
# {{{ toggle winclass function.
#
# This function gets winclass and uses it when ghostty is started to run the
# ao (alpha omega) script with a parameter. ao is manages creating named TMUX
# sessions.  Toggler's first innovation runs ghostty. Thereafter the winclass
# is toggled: hidden or showed.
#
# Parameters:
# 1 - winclass to toggle.  Also passed to ao to setup a named TMUX session.
# 2 - working directory

toggle_winclass() {
  setGlobalVariables "$1" "$2"

  [[ $_verbose == true ]] && notify-send "$_tmuxSession" "1. Search $_tmuxSession"

  if [[ -z "$_winclass" ]]; then
    startTerminal
 else
    if [[ -f /tmp/"$_tmuxSession" ]]; then
      hideTerminal
    elif [[ ! -f /tmp/"$_tmuxSession" ]]; then
      showTerminal
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Global variables are prefaced with an underscore as follows:
#     $1 -> _tmuxSession is the name of the tmux sesion created.
#     $2 -> _dir is the directory the TMUX session is started from.
#     _verbose -> manually toggled true or false.
#     _winclass -> a readonly array with X11 window class names.

setGlobalVariables() {
  _verbose=false
  _tmuxSession=$1
  _dir=$2
  readarray -t _winclass < <(xdotool search --classname "$_tmuxSession")
}

# -------------------------------------------------------------------------- }}}
# {{{ Start a terminal using $_tmuxSession as the X11 instance name.

startTerminal() {
  [[ $_verbose == true ]] && notify-send "$_tmuxSession" "2. Create $_tmuxSession"
  cd "$_dir" || exit
  touch /tmp/"$_tmuxSession"
  ghostty --x11-instance-name="$_tmuxSession" --command="ao $_tmuxSession"
}

# -------------------------------------------------------------------------- }}}
# {{{ Hide $_tmuxSession

hideTerminal(){
  [[ $_verbose == true ]] && notify-send "$_tmuxSession" "3. Hide $_tmuxSession"
  rm /tmp/"$_tmuxSession"
  for id in "${_winclass[@]}"; do xdo hide "$id"; done
}

# -------------------------------------------------------------------------- }}}
# {{{ Show $_tmuxSession

showTerminal(){
  [[ $verbose == true ]] && notify-send "$_tmuxSession" "4. Show $_tmuxSession"
  touch /tmp/"$_tmuxSession"
  for id in "${_winclass[@]}"; do xdo show "$id"; done
}

# -------------------------------------------------------------------------- }}}
# {{{ Use valid input to toggle a winclass.

if [[ $# -eq 1 ]]; then
  case "$1" in
        "Neovim") toggle_winclass "$1" "$GITHOME/nvim.traap" ;;
    "Scratchpad") toggle_winclass "$1" "$WIKIHOME" ;;
       "Upgrade") toggle_winclass "$1" "$HOME" ;;
          "Wiki") toggle_winclass "$1" "$WIKIHOME" ;;
       "YouTube") toggle_winclass "$1" "$GITHOME/youtube" ;;
          "Zero") toggle_winclass "$1" "$GITHOME" ;;
    *)
      echo "Toggling option not supported"
      exit
      ;;
  esac
else
  echo "toggler [Neovim|Scratchpad|Upgrade|Wiki|YouTube|Zero]"
fi

# -------------------------------------------------------------------------- }}}
