#!/bin/bash
# {{{ AO credits and documentation.
#
# Inspired by:
#  Doug Bell - "Organized Development with tmux", Jun 18, 2019
#               Conference in the Cloud A Perl and Raku Conf
#
# https://www.youtube.com/watch?v=o7Dg1kmjhfQ&t=2428s
#
# Name: Alpha and Omega
#   ao
#
# Use:
#  ao kjv
#
# Argument:
#  $1 tmux session name
#
# Notes:
#   1. A session is created or attached to.
#   2. A new session is added if ao is used from with a tmux session.
#
# -------------------------------------------------------------------------- }}}
# {{{ function to clone or pull a repository as needed.

# Note:  In practice, I only clone repositories that are infrequencly used.

getRepository() {
  dir=$(pwd)

  (cd "$GITPATH" && gr "$1" && cd "$dir") || (echo "GITPATH is not defined." && exit)
}

# -------------------------------------------------------------------------- }}}
# {{{ Validate request includes one session name.

if [[ $# -eq 1 ]]; then

  # ------------------------------------------------------------------------ }}}
  # {{{ Validate session name.

  if ! tmux has-session -t "$1" 2>/dev/null; then
    case $1 in

    # ---------------------------------------------------------------------- }}}
    # {{{ Create ao session

    "ao")
      tmux new-session -c "$BASHHOME"/bin -n Coder -s "$1" -d
      tmux send-keys -t "$1":1 "$EDITOR ao" Enter
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create d (double), h (homerun), t (triple)

    "d")
      tmux new-session -n Double -s "$1" -d
      tmux split-window -bh
      ;;

    "h")
      tmux new-session -n HomeRun -s "$1" -d
      tmux split-window -bh
      tmux split-window -bv -t 2
      tmux split-window -bv -t 1
      ;;

    "t")
      tmux new-session -n Triple -s "$1" -d
      split-window -v
      split-window -bfh
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create bash session

    "bash")
      tmux new-session -c "$BASHHOME" -n dotfiles -s "$1" -d
      tmux new-window -c "$BASHHOME" -n bashrc -t "$1":2

      tmux send-keys -t "$1":2 \
        "$EDITOR \
        bashrc \
        bashrc-personal \
        bash_logout \
        my_aliases \
        my_completions \
        my_exports \
        my_functions \
        my_paths \
        my_prompt \
      " Enter

      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create havasu session

    "havasu")
      getRepository havasu
      tmux new-session -c "$GITPATH"/havasu -n Coder -s "$1" -d
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create KJV session

    "kjv")
      tmux new-session -c "$GITPATH"/kjv -n 1611 -s "$1" -d
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create Nvim session

    "Neovim")
      tmux new-session -c "$GITPATH/nvim.traap" -n Coder -s "$1" -d
      tmux send-keys -t "$1":1 \
        'nvim \
          init.lua \
          lua/traap/config/autocmds.lua \
          lua/traap/config/keymaps.lua \
          lua/traap/config/lazy.lua \
          lua/traap/config/options.lua \
          lua/traap/core/constants.lua \
          lua/traap/core/globals.lua \
        ' Enter
      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create Scratchpad session

    "Scratchpad")
      tmux new-session -c "$WIKIHOME" -n 'Quick' -s "$1" -d
      tmux send-keys -t "$1":1 "$EDITOR +WikiJournal" Enter
      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create tmux session

    "tmux")
      tmux new-session -c "$GITPATH"/tmux -n Coder -s "$1" -d
      tmux send-keys -t "$1":1 "$EDITOR tmux.conf" Enter
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create vim session

    "vim")
      getRepository vim
      tmux new-session -c "$GITPATH"/vim -n Coder -s "$1" -d

      tmux send-keys -t "$1":1 \
        "vim \
        plug.vim \
        bundle/vim-bundle-keybindings/plugin/bundle-keybindings.vim \
        bundle/vim-bundle-settings/plugin/bundle-settings.vim \
        vimrc \
        bootstrap.vim \
        " Enter

      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create Upgrade session

    "Upgrade")
      tmux new-session -c "$BASHHOME"/bin -n Admin -s "$1" -d
      tmux split-window -bh

      tmux send-keys -t 1 "upgrade" enter
      tmux send-keys -t 2 "gits" enter
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create Wiki session

    "Wiki")
      tmux new-session -c "$WIKIHOME" -n Notebook -s "$1" -d
      tmux new-window -c "$GITPATH" -n 'Coder' -t "$1":2

      tmux send-keys -t "$1":1 "$EDITOR $WIKIHOME/index.md" Enter
      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create Work session

    "Work")
      tmux new-session -c "$WORKHOME/Wiki" -n Notebook -s "$1" -d
      tmux new-window -c "$WORKHOME" -n 'Coder' -t "$1":2

      tmux send-keys -t "$1":1 "$EDITOR $WORKHOME/Wiki/index.md" Enter
      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Create YouTube session

    "YouTube")
      tmux new-session -c "$GITHOME" -n 'Notes' -s "$1" -d
      tmux new-window -c "$GITPATH" -n 'Coder' -t "$1":2
      tmux new-window -c "$GITPATH" -n 'Demo' -t "$1":3

      tmux send-keys -t "$1":1 "$EDITOR $GITHOME"/youtube/wiki/index.md Enter
      tmux select-window -t "$1":1
      ;;

    # ---------------------------------------------------------------------- }}}
    # {{{ Session name noot supported error.

    *)
      echo "Session name $1 is not supported."
      exit
      ;;
    esac
  else
    echo "Attaching to existing tmux session."
  fi

# -------------------------------------------------------------------------- }}}
# {{{ Display usage

else
  echo \
    "Session name [ao|bash|d|h|havasu|kjv|Nvim|Scratchpad|t|Upgrade|vim|Wiki|YouTube] is required" &&
    exit
fi

# -------------------------------------------------------------------------- }}}
# {{{ Attach to tmux session.

[[ -z $TMUX ]] && tmux attach -t "$1"
exit 0

# -------------------------------------------------------------------------- }}}
