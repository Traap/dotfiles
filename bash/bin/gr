#!/bin/bash
# {{{ Program overview.
#
# Name:
#   gr nvim [https] [nvin.traap]
#
# Purpose:
#   Clone or pull a Git repository using HTTPS or GIT protocol.
#
# Arguments:
#   1 - repository to clone
#   2 - optional: use HTTPS versus GIT protocol when present.
#   3 - optional: output director name
#
# Use:
#   gr nvim
#   gr nvim https
#   gr nvim https nvim.traap
#
#   Note:  any 2nd argument uses https
#
# -------------------------------------------------------------------------- }}}
# {{{ Get all tags.

getTags() {
 sayAndDo "git fetch --all --tags"
}

# {{{ Determine if a pull is needed.

# shellcheck disable=SC2120
gitCheck() {
  # Git variables used to determine if a pull is needed.
  git fetch
  upstream=${1:-'@{u}'}
  local=$(git rev-parse @)
  remote=$(git rev-parse "$upstream")
  base=$(git merge-base @ "$upstream")

  if [[ "$local" == "$remote" ]]; then
    echo "Up-to-date"
  elif [[ "$remote" == "$base" ]]; then
    echo "Need-to-Push"
  elif [[ "$local" == "$base" ]]; then
    echo "Need-to-Pull"
  else
    echo "Diverged"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Capture current directory.

dir=$(pwd)

# -------------------------------------------------------------------------- }}}
# {{{ Determine when a clone or pull is needed.

case "$#" in
  1 | 2)
    if [ -d "$1" ]; then
      operation=pull
    else
      operation=clone
    fi
    ;;
  3)
    if [ -d "$3" ]; then
      operation=pull
    else
      operation=clone
    fi
    ;;
esac

# -------------------------------------------------------------------------- }}}
# {{{ Determine when HTTPS or GIT protocol is used.

case "$#" in
  1)
    protocol=git@github.com:Traap/"$1".git
    ;;
  2 | 3)
    if [ "$2" = "https" ]; then
      protocol=git@github.com:Traap/"$1".git
    else
      protocol=https://github.com/Traap/"$1"
    fi
    ;;
esac

# -------------------------------------------------------------------------- }}}
# {{{ Do the clone or pull operation.

if [ "$operation" = "pull" ]; then
  cd "$1" || exit
  if [[ "$(gitCheck)" == "Need-to-Pull" ]]; then
    sayAndDo "git $operation"
    getTags
  fi
  cd "$dir" || exit
else
  if [ "$#" -eq 2 ]; then
    sayAndDo "git $operation $protocol $2"
  else
    sayAndDo "git $operation $protocol"
  fi
  getTags
fi

# -------------------------------------------------------------------------- }}}
# {{{ Restore the orginal directory.

cd "$dir" || exit

# -------------------------------------------------------------------------- }}}
