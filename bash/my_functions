#!/bin/bash

# {{{ Set base16 color.  Mom and Dad functions are a simple tribute to my parents.

useBase16=false

if [[ useBase16 == true ]]; then
  base16Root=${GITHOME}/color/base16-shell
  [[ -n $PS1 ]] && \
    [[ -s $base16Root/profile_helper.sh ]] && \
      source $base16Root/profile_helper.sh

  mom() {
    base16Color $1 dark
  }

  dad() {
    base16Color $1 light
  }

  base16Color() {
    if [[ -f ${base16Root}/scripts/base16-$1-$2.sh ]]; then
      file=base16-$1-$2.sh
    else
      file=base16-$1.sh
    fi
    cd ${base16Root} && ./colortest ${file} && cd -
  }

  ct() {
    cd ${base16Root}  && ./colortest && cd -
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ A check for the existence of a directory.

dirExists() {
  [[ -d "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the existence of a file.

fileExists() {
  [[ -f "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the host name.

hostName() {
 [[ ${HOSTNAME} =~ "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the existence of a program on my path.

programExists() {
  which "$1" &> /dev/null ;
}

# -------------------------------------------------------------------------- }}}
# {{{ A check for the operating system type.

osType() {
 [[ ${OSTYPE} =~ "$1" ]]
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to PATH

appendToPath() {
  if dirExists "$1"; then
    [[ ":$PATH:" != *"$1"* ]] && export PATH="${PATH}:$1"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Prepend to PATH

prependToPath() {
  if dirExists "$1"; then
    [[ ":$PATH:" != *"$1"* ]] && export PATH="$1:${PATH}"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to INFOPATH

appendToInfoPath() {
  if dirExists "$1"; then
    [[ ":$INFOPATH:" != *"$1"* ]] && export INFOPATH="${INFOPATH}:$1"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Append to MANPATH

appendToManPath() {
  if dirExists "$1"; then
    [[ ":$MANPATH:" != *"$1"* ]] && export MANPATH="${MANPATH}:$1"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Disable features / programs running on OSX.

if osType "darwin"; then
  msa() { Launchctl remove com.microsoft.SyncServicesAgent ; }
  pah() { defaults write -g ApplePressAndHoldEnable -bool false ; }
fi

# -------------------------------------------------------------------------- }}}
# {{{ Set terminal title.

title() { echo -n -e "\033]0;$1\007"; }

# -------------------------------------------------------------------------- }}}
# {{{ Generating a new SSH key and adding it to the ssh-agent
#     https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

sshkeys() {
  if [[ -d $SSHHOME ]]; then
    eval "$(ssh-agent -s)"
    for key in $(ls $SSHHOME/*.pub); do
      ssh-add -q "${key%.*}"
    done;
  fi
}

sshlist() {
  ps aux | awk '/ssh-agent -s/'
}

sshme() {
  echo "My ssh-agent PID ${SSH_AGENT_PID}"
}

sshkill() {
  killall ssh-agent
}

latexmkkill() {
  if osType "msys"; then
    for pid in $(ps aux | awk '/latexmk/ {print $1}'); do kill -9 $pid; done
    for pid in $(ps aux | awk '/perl/    {print $1}'); do kill -9 $pid; done
  else
    for pid in $(ps aux | awk '/latexmk/ {print $2}'); do kill -9 $pid; done
    for pid in $(ps aux | awk '/perl/    {print $2}'); do kill -9 $pid; done
  fi
}

sshstart() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh start
  fi
}

sshstop() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh stop
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Make okular shut up on Windows.

okular() {
  /c/ProgramData/chocolatey/bin/okular.exe $1 > /dev/null 2>&1
}

# -------------------------------------------------------------------------- }}}
# {{{ Cxx helper to simplify CxxTest use for C++ software.

cxx() {
  ${GITHOME}/cxxtest/bin/cxxtestgen --error-printer -o Test$1.cpp Test$1.h
  g++ -w -o Test$1 Test$1.cpp
  ./Test$1
  rm Test$1.cpp
}

# -------------------------------------------------------------------------- }}}
# {{{ Start Vim with client server when it is compiled in.

if [[ ${OSTYPE} =~ "darwin" ]]; then
  if [[ -n $(vim --version | grep clientserver) ]]; then
    alias vimx='$EDITOR --servername VIM'
  fi
fi

# -------------------------------------------------------------------------- }}}
# {{{ Perforce defaults.

if [[ ${OSTYPE} =~ "linux" ]]; then
  if [[ ${HOSTNAME} =~ "DarkKnight" ]]; then
    export P4DISK=${HOME}
    export P4HOST=localhost
    export P4PORT=1666
    export P4ROOT=${P4DISK}/p4root
    export P4CLIENT=Gary:on:Ryder
  fi
fi

# -------------------------------------------------------------------------- }}}
# {{{ sdkman

if [[ -f ${HOME}/.sdkman/bin/sdkman-init.sh ]]; then
  export SDKMAN_DIR="${HOME}/.sdkman"
  source "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

# -------------------------------------------------------------------------- }}}
# {{{ Build gem

bldgem() {
  clear && cd $1 \
     && bundle install \
     && bundle exec rake \
     && bundle exec rake install
}

# -------------------------------------------------------------------------- }}}
# {{{ Build something I know about.

bld() {
  case $1 in
    amber)
      bldgem ${AMBERPATH}
      ;;
    emend)
      bldgem ${GITHOME}/emend
      ;;
    daryn)
      bldgem ${GITHOME}/daryn
      ;;
    ametrine)
      bldgem ${GITHOME}/ametrine
      ;;
    *)
      echo "bld: $1 not supported."
      echo "Usage: bld [amber | daryn | emend| ametrine ]"
  esac
}

# -------------------------------------------------------------------------- }}}
# {{{ amber function.

check-test-output() {
  echo grep -rw --include=\*step*-status.* test-output/ -e $1
  grep -rw --include=\*step*-status.* test-output/ -e $1
}

passes() {
  check-test-output PASS
}

fail() {
  check-test-output FAIL
}

passfail() {
  check-test-output "PASS -e FAIL"
}

requirements() {
  echo "grep -rw --include=\*.yaml factory/ -e 'requirement:'"
  grep -rw --include=\*.yaml factory/ -e 'requirement:'
}

validate-git-client() {
  cd ${GITHOME}/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line
  docbld
}

validate-git-gui() {
  cd ${GITHOME}/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line \
        --language=en --browser=Chrome
  docbld
}

# -------------------------------------------------------------------------- }}}
# {{{ GIT_HOME is needed for test automation framework.

if [[ -d ${HOME}/bb ]]; then
  export GIT_HOME=${HOME}/bb
fi

# -------------------------------------------------------------------------- }}}
# {{{ spath function tells me each part of my current path.

spath() {
  echo $PATH | sed -n 1'p' | tr ':' '\n' | while read word; do
    echo $word
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ master moves me to master and shows me a few commits.

br() {
  git co $1
}

master() {
  br master
  clear
  git logg -15
}

# -------------------------------------------------------------------------- }}}
# {{{ Grep my history for a prior command I used.

hg() {
  history | grep "$1"
}

# -------------------------------------------------------------------------- }}}
# {{{ pm

pm() {
  sudo pacman --noconfirm -Sy $1
}

# -------------------------------------------------------------------------- }}}
# {{{ cj & gh are functions that I rewrite all the time to simplify my life.

cj() {
  newdoc --dir=$1/$2 --file=$2 --title=$2 $3 $4
}

dh() {
  clear && docbld clobber && docbld texx && ll && zathura $1
}

# -------------------------------------------------------------------------- }}}
# {{{ Use LaTeX make to generate a document.

pdf() {
  latexmk -pdf -verbose -file-line-error -synctex=1 -interaction=nonstopmode -cd $1
}

# -------------------------------------------------------------------------- }}}
