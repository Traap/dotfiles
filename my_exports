# {{{ She Bang!

#!/bin/bash

# -------------------------------------------------------------------------- }}}
# {{{ Default Browers, File Manager, and 256 colors.

export BROWSER=brave
export FILE=ranger
export TERM=xterm-256color
echoWarning=0

# -------------------------------------------------------------------------- }}}
# {{{ Darwin CLI and LS colors.

if osType "darwin"; then
  export CLICOLOR=1
  export LSCOLORS=GxFxBxDxCxegedabagacad
fi

# -------------------------------------------------------------------------- }}}
# {{{ amber location.

if dirExists ${HOME}/git/amber; then
   AMBERPATH=${HOME}/git/amber
elif dirExists ${HOME}/bb/amber; then
     AMBERPATH=${HOME}/bb/amber
elif dirExists ${HOME}/soup/amber; then
     AMBERPATH=${HOME}/soup/amber
else
  AMBERPATH=""
  [[ $echoWarning == 1 ]] && echo "WARNING: amber is not installed."
fi
export AMBERPATH

if [[ -d ${AMBERPATH} ]]; then
  newfactoryitem() {
    ${AMBERPATH}/bin/newfactoryitem "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ autodoc location.

if  dirExists ${HOME}/git/autodoc; then
  AUTODOCPATH=${HOME}/git/autodoc
elif dirExists ${HOME}/bb/autodoc; then
   AUTODOCPATH=${HOME}/bb/autodoc
elif dirExists ${HOME}/soup/autodoc; then
   AUTODOCPATH=${HOME}/soup/autodoc
else
  [[ $echoWarning == 1 ]] && echo "WARNING: autodoc is not installed."
  AUTODOCPATH=""
fi
export AUTODOCPATH

# -------------------------------------------------------------------------- }}}
# {{{ docbld location and function.  These must go together.

if dirExists ${HOME}/git/docbld; then
  DOCBLDPATH=${HOME}/git/docbld
elif dirExists ${HOME}/bb/docbld; then
    DOCBLDPATH=${HOME}/bb/docbld
elif dirExists ${HOME}/soup/docbld; then
    DOCBLDPATH=${HOME}/soup/docbld
else
  [[ $echoWarning == 1 ]] && echo "WARNING: docbld is not installed."
  DOCBLDPATH=""
fi
export DOCBLDPATH

# -------------------------------------------------------------------------- }}}
# {{{ emend location.

if dirExists ${HOME}/git/emend; then
   EMENDPATH=${HOME}/git/emend
elif dirExists ${HOME}/bb/emend; then
     EMENDPATH=${HOME}/bb/emend
elif dirExists ${HOME}/soup/emend; then
     EMENDPATH=${HOME}/soup/emend
else
  EMENDPATH=""
  [[ $echoWarning == 1 ]] && echo "WARNING: emend is not installed."
fi
export EMENDPATH

if [[ -d ${EMENDPATH} ]]; then
  newcomponent() {
    ${EMENDPATH}/bin/newcomponent "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ Editor.

export MANWIDTH=76
if osType "msys"; then
  EDITOR=$(which vim)
elif programExists nvim; then
  EDITOR=$(which nvim)
  export MANPAGER='nvim +Man!'
else
  EDITOR=$(which vim)
fi
export EDITOR

# -------------------------------------------------------------------------- }}}
# {{{ emend location and function.  These must go together.

if dirExists ${HOME}/git/emend; then
  EMENDPATH=${HOME}/git/emend
else
  EMENDPATH=""
fi
export EMENDPATH

if [[ -d ${EMENDPATH} ]]; then
  newcomponent() {
    ${EMENDPATH}/bin/newcomponent "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ FZF customizations

# export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'

# -------------------------------------------------------------------------- }}} # {{{ GIT_HOME is needed for test automation framework.

if dirExists ${HOME}/git; then
  export GIT_HOME=${HOME}/git
else
  echo "WARNING: ${HOME}/git does not exists."
fi

# -------------------------------------------------------------------------- }}}
# {{{ HISTCONTROL

export HISTCONTROL=ignoreboth:erasedups

# -------------------------------------------------------------------------- }}}
# {{{ JAVA locations.

if dirExists ${HOME}/build/lclasses/main; then
  CLASSPATH=build/classes/main:build/classes/test
  export CLASSPATH
fi

# -------------------------------------------------------------------------- }}}
# {{{ newdoc location and functions.  These must go together.

if dirExists ${HOME}/git/newdoc; then
  NEWDOCPATH=${HOME}/git/newdoc
elif dirExists ${HOME}/bb/newdoc; then
    NEWDOCPATH=${HOME}/bb/newdoc
elif dirExists ${HOME}/soup/newdoc; then
    NEWDOCPATH=${HOME}/soup/newdoc
else
   [[ $echoWarning == 1 ]] && echo "WARNING: newdoc is not installed."
  NEWDOCPATH=""
fi
export NEWDOCPATH

if [[ -d ${NEWDOCPATH} ]]; then
  newdoc() {
    ${NEWDOCPATH}/newdoc "$@"
  }
fi

# -------------------------------------------------------------------------- }}}
# {{{ X11 display type.

if osType "linux"; then
  export DISPLAY=:0
fi

# -------------------------------------------------------------------------- }}}
# {{{ Lock my Windows environment variables.  Don't ask, Don't tell!!!

if osType "msys"; then
  if hostName "USLK"; then
    export HOME=/c/Users/${USERNAME}
    export HOMEDRIVE=/c
    export HOMEPATH=/c/Users/${USERNAME}
    export GIT_HOME=/c/Users/${USERNAME}/git
    export HOMESHARE=/c
  fi
fi

# -------------------------------------------------------------------------- }}}
